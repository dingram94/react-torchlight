"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("fs"),t=require("path");function n(e){if(e&&e.__esModule)return e;var t=Object.create(null);return e&&Object.keys(e).forEach(function(n){if("default"!==n){var r=Object.getOwnPropertyDescriptor(e,n);Object.defineProperty(t,n,r.get?r:{enumerable:!0,get:function(){return e[n]}})}}),t.default=e,Object.freeze(t)}var r=n(e),o=n(t);exports.torchlightVitePlugin=function(e={}){const{rootFolder:t="src",outputPath:n="torchlight.gen.ts"}=e,i=new Set;return{name:"torchlight-vite-plugin",configResolved(e){},transform(e,t){if(!t.endsWith(".ts")&&!t.endsWith(".tsx"))return null;if(t.includes("torchlight.gen.ts"))return null;const n=/useTorchlightSteps\s*\(\s*["']([^"']+)["']/g;let r;for(;null!==(r=n.exec(e));){const e=r[1];e&&""!==e.trim()&&"tourId"!==e&&i.add(e)}return null},generateBundle(){const e=Array.from(i).sort();if(0===e.length)return;const s=`\n      /* eslint-disable */\n\n      // @ts-nocheck\n\n      // noinspection JSUnusedGlobalSymbols\n      \n      // Auto-generated by torchlight-vite-plugin\n// Do not edit this file manually\n// Generated on: ${(new Date).toISOString()}\n\ndeclare module "ReactTorchlight" {\n  interface TorchlightToursRegistry {\n${e.map(e=>`    "${e}": never;`).join("\n")}\n  }\n}\n\n// Export the tour IDs for runtime use\nexport const TOUR_IDS = {\n${e.map((t,n)=>`  ${t.replace(/[^a-zA-Z0-9_]/g,"_")}: "${t}"${n<e.length-1?",":""}`).join("\n")}\n} as const;\n\nexport type TourId = ${e.map(e=>`"${e}"`).join(" | ")};\n`,l=o.join(t,o.dirname(n));r.existsSync(l)||r.mkdirSync(l,{recursive:!0}),r.writeFileSync(n,s,"utf-8"),console.log(`âœ… Generated torchlight types with ${i.size} tours: ${e.join(", ")}`)}}};
//# sourceMappingURL=vite.js.map
