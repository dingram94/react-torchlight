{"version":3,"file":"vite.js","sources":["../../src/plugins/vite.ts"],"sourcesContent":["import * as fs from \"fs\";\nimport * as path from \"path\";\nimport { Plugin } from \"vite\";\n\ninterface TorchlightVitePluginOptions {\n  rootFolder?: string;\n  outputPath?: string;\n}\n\nexport function torchlightVitePlugin(\n  options: TorchlightVitePluginOptions = {}\n): Plugin {\n  const { rootFolder = \"src\", outputPath = \"torchlight.gen.ts\" } = options;\n\n  let config: any;\n  const tourIds = new Set<string>();\n\n  return {\n    name: \"torchlight-vite-plugin\",\n    configResolved(resolvedConfig) {\n      config = resolvedConfig;\n    },\n    transform(code, id) {\n      // Only process TypeScript/TSX files\n      if (!id.endsWith(\".ts\") && !id.endsWith(\".tsx\")) {\n        return null;\n      }\n\n      // Skip the generated file itself\n      if (id.includes(\"torchlight.gen.ts\")) {\n        return null;\n      }\n\n      // Simple regex-based extraction for tour IDs\n      // This is a simplified version - the TypeScript plugin provides more robust parsing\n      const useTorchlightStepsRegex =\n        /useTorchlightSteps\\s*\\(\\s*[\"']([^\"']+)[\"']/g;\n\n      let match;\n      while ((match = useTorchlightStepsRegex.exec(code)) !== null) {\n        const tourId = match[1];\n        if (tourId && tourId.trim() !== \"\" && tourId !== \"tourId\") {\n          tourIds.add(tourId);\n        }\n      }\n\n      return null;\n    },\n    generateBundle() {\n      const sortedTourIds = Array.from(tourIds).sort();\n\n      if (sortedTourIds.length === 0) {\n        return;\n      }\n\n      const content = `\n      /* eslint-disable */\n\n      // @ts-nocheck\n\n      // noinspection JSUnusedGlobalSymbols\n      \n      // Auto-generated by torchlight-vite-plugin\n// Do not edit this file manually\n// Generated on: ${new Date().toISOString()}\n\ndeclare module \"ReactTorchlight\" {\n  interface TorchlightToursRegistry {\n${sortedTourIds.map((id) => `    \"${id}\": never;`).join(\"\\n\")}\n  }\n}\n\n// Export the tour IDs for runtime use\nexport const TOUR_IDS = {\n${sortedTourIds\n  .map(\n    (id, index) =>\n      `  ${id.replace(/[^a-zA-Z0-9_]/g, \"_\")}: \"${id}\"${\n        index < sortedTourIds.length - 1 ? \",\" : \"\"\n      }`\n  )\n  .join(\"\\n\")}\n} as const;\n\nexport type TourId = ${sortedTourIds.map((id) => `\"${id}\"`).join(\" | \")};\n`;\n\n      const outputDir = path.join(rootFolder, path.dirname(outputPath));\n      if (!fs.existsSync(outputDir)) {\n        fs.mkdirSync(outputDir, { recursive: true });\n      }\n\n      fs.writeFileSync(outputPath, content, \"utf-8\");\n      console.log(\n        `âœ… Generated torchlight types with ${\n          tourIds.size\n        } tours: ${sortedTourIds.join(\", \")}`\n      );\n    },\n  };\n}\n"],"names":["options","rootFolder","outputPath","tourIds","Set","name","configResolved","resolvedConfig","transform","code","id","endsWith","includes","useTorchlightStepsRegex","match","exec","tourId","trim","add","generateBundle","sortedTourIds","Array","from","sort","length","content","Date","toISOString","map","join","index","replace","outputDir","path","dirname","fs","existsSync","mkdirSync","recursive","writeFileSync","console","log","size"],"mappings":"sbASgB,SACdA,EAAuC,IAEvC,MAAMC,WAAEA,EAAa,MAAKC,WAAEA,EAAa,qBAAwBF,EAG3DG,EAAU,IAAIC,IAEpB,MAAO,CACLC,KAAM,yBACN,cAAAC,CAAeC,GAEd,EACD,SAAAC,CAAUC,EAAMC,GAEd,IAAKA,EAAGC,SAAS,SAAWD,EAAGC,SAAS,QACtC,OAAO,KAIT,GAAID,EAAGE,SAAS,qBACd,OAAO,KAKT,MAAMC,EACJ,8CAEF,IAAIC,EACJ,KAAwD,QAAhDA,EAAQD,EAAwBE,KAAKN,KAAiB,CAC5D,MAAMO,EAASF,EAAM,GACjBE,GAA4B,KAAlBA,EAAOC,QAA4B,WAAXD,GACpCb,EAAQe,IAAIF,EAEf,CAED,OAAO,IACR,EACD,cAAAG,GACE,MAAMC,EAAgBC,MAAMC,KAAKnB,GAASoB,OAE1C,GAA6B,IAAzBH,EAAcI,OAChB,OAGF,MAAMC,EAAU,wNASH,IAAIC,MAAOC,+FAI5BP,EAAcQ,IAAKlB,GAAO,QAAQA,cAAemB,KAAK,uFAMtDT,EACCQ,IACC,CAAClB,EAAIoB,IACH,KAAKpB,EAAGqB,QAAQ,iBAAkB,UAAUrB,KAC1CoB,EAAQV,EAAcI,OAAS,EAAI,IAAM,MAG9CK,KAAK,8CAGeT,EAAcQ,IAAKlB,GAAO,IAAIA,MAAOmB,KAAK,YAGrDG,EAAYC,EAAKJ,KAAK5B,EAAYgC,EAAKC,QAAQhC,IAChDiC,EAAGC,WAAWJ,IACjBG,EAAGE,UAAUL,EAAW,CAAEM,WAAW,IAGvCH,EAAGI,cAAcrC,EAAYuB,EAAS,SACtCe,QAAQC,IACN,qCACEtC,EAAQuC,eACCtB,EAAcS,KAAK,QAEjC,EAEL"}