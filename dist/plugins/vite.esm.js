import*as n from"fs";import*as t from"path";function e(e={}){const{rootFolder:o="src",outputPath:r="torchlight.gen.ts"}=e,i=new Set;return{name:"torchlight-vite-plugin",configResolved(n){},transform(n,t){if(!t.endsWith(".ts")&&!t.endsWith(".tsx"))return null;if(t.includes("torchlight.gen.ts"))return null;const e=/useTorchlightSteps\s*\(\s*["']([^"']+)["']/g;let o;for(;null!==(o=e.exec(n));){const n=o[1];n&&""!==n.trim()&&"tourId"!==n&&i.add(n)}return null},generateBundle(){const e=Array.from(i).sort();if(0===e.length)return;const s=`\n      /* eslint-disable */\n\n      // @ts-nocheck\n\n      // noinspection JSUnusedGlobalSymbols\n      \n      // Auto-generated by torchlight-vite-plugin\n// Do not edit this file manually\n// Generated on: ${(new Date).toISOString()}\n\ndeclare module "ReactTorchlight" {\n  interface TorchlightToursRegistry {\n${e.map(n=>`    "${n}": never;`).join("\n")}\n  }\n}\n\n// Export the tour IDs for runtime use\nexport const TOUR_IDS = {\n${e.map((n,t)=>`  ${n.replace(/[^a-zA-Z0-9_]/g,"_")}: "${n}"${t<e.length-1?",":""}`).join("\n")}\n} as const;\n\nexport type TourId = ${e.map(n=>`"${n}"`).join(" | ")};\n`,l=t.join(o,t.dirname(r));n.existsSync(l)||n.mkdirSync(l,{recursive:!0}),n.writeFileSync(r,s,"utf-8"),console.log(`âœ… Generated torchlight types with ${i.size} tours: ${e.join(", ")}`)}}}export{e as torchlightVitePlugin};
//# sourceMappingURL=vite.esm.js.map
