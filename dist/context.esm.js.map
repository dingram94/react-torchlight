{"version":3,"file":"context.esm.js","sources":["../src/context.tsx"],"sourcesContent":["import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\n\n// Import generated types (will be created by the plugin)\n// The file will be generated by the TypeScript plugin when tours are defined\ndeclare global {\n  interface TorchlightToursRegistry {}\n}\n\n// Fallback types when generated file doesn't exist yet\ntype TOUR_IDS = Record<string, string>;\ntype TourId = string;\nimport {\n  TorchlightContextProps,\n  TorchlightProviderProps,\n  TorchlightStep,\n  TorchlightTour,\n} from \"./types\";\n\n// Helper type to get registered tour IDs\ntype RegisteredTourIds = keyof TorchlightToursRegistry extends never\n  ? string\n  : keyof TorchlightToursRegistry;\n\nexport const TorchlightContext =\n  createContext<TorchlightContextProps<RegisteredTourIds> | null>(null);\n\nexport const TorchlightInternalProvider: React.FC<TorchlightProviderProps> = ({\n  children,\n  overlayProps = {},\n}) => {\n  const [tours, setTours] = useState<Map<string, TorchlightTour>>(new Map());\n  const [activeTour, setActiveTour] = useState<RegisteredTourIds | null>(null);\n\n  const registerStep = useCallback(\n    (step: Omit<TorchlightStep, \"target\">, ref: React.RefObject<any>) => {\n      setTours((prev) => {\n        const newTours = new Map(prev);\n        const tour = newTours.get(step.tourId) || {\n          id: step.tourId,\n          steps: [],\n          currentStepIndex: 0,\n          isActive: false,\n        };\n\n        const existingStepIndex = tour.steps.findIndex((s) => s.id === step.id);\n        const newStep = { ...step, target: ref };\n\n        if (existingStepIndex !== -1) {\n          const existingStep = tour.steps[existingStepIndex];\n          const isIdentical =\n            existingStep.order === newStep.order &&\n            existingStep.title === newStep.title &&\n            existingStep.content === newStep.content &&\n            existingStep.placement === newStep.placement &&\n            existingStep.target === newStep.target;\n\n          if (isIdentical) {\n            return prev;\n          }\n\n          const updatedSteps = [...tour.steps];\n          updatedSteps[existingStepIndex] = newStep;\n          updatedSteps.sort((a, b) => a.order - b.order);\n\n          newTours.set(step.tourId, {\n            ...tour,\n            steps: updatedSteps,\n          });\n        } else {\n          const newSteps = [...tour.steps, newStep].sort(\n            (a, b) => a.order - b.order\n          );\n          newTours.set(step.tourId, {\n            ...tour,\n            steps: newSteps,\n          });\n        }\n\n        return newTours;\n      });\n    },\n    []\n  );\n\n  const unregisterStep = useCallback(\n    (stepId: string, tourId: RegisteredTourIds) => {\n      setTours((prev) => {\n        const newTours = new Map(prev);\n        const tour = newTours.get(tourId as string);\n\n        if (!tour) return prev;\n\n        const newSteps = tour.steps.filter((s) => s.id !== stepId);\n\n        if (newSteps.length === 0) {\n          newTours.delete(tourId as string);\n          if (activeTour === tourId) {\n            setActiveTour(null);\n          }\n        } else {\n          newTours.set(tourId as string, {\n            ...tour,\n            steps: newSteps,\n            currentStepIndex: Math.min(\n              tour.currentStepIndex,\n              newSteps.length - 1\n            ),\n          });\n        }\n\n        return newTours;\n      });\n    },\n    [activeTour]\n  );\n\n  const startTour = useCallback((tourId: RegisteredTourIds) => {\n    setTours((prev) => {\n      const newTours = new Map(prev);\n      const tour = newTours.get(tourId as string);\n\n      if (!tour) {\n        console.warn(\n          `Tour \"${String(\n            tourId\n          )}\" not found. Make sure all steps are registered.`\n        );\n        return prev;\n      }\n\n      if (tour.steps.length === 0) {\n        console.warn(\n          `Tour \"${String(\n            tourId\n          )}\" has no steps. Make sure components with steps are mounted.`\n        );\n        return prev;\n      }\n\n      newTours.set(tourId as string, {\n        ...tour,\n        isActive: true,\n        currentStepIndex: 0,\n      });\n\n      return newTours;\n    });\n\n    setActiveTour(tourId);\n  }, []);\n\n  const stopTour = useCallback(\n    (tourId: RegisteredTourIds) => {\n      setTours((prev) => {\n        const newTours = new Map(prev);\n        const tour = newTours.get(tourId as string);\n\n        if (tour) {\n          newTours.set(tourId as string, {\n            ...tour,\n            isActive: false,\n          });\n        }\n\n        return newTours;\n      });\n\n      if (activeTour === tourId) {\n        setActiveTour(null);\n      }\n    },\n    [activeTour]\n  );\n\n  const nextStep = useCallback((tourId: RegisteredTourIds) => {\n    setTours((prev) => {\n      const newTours = new Map(prev);\n      const tour = newTours.get(tourId as string);\n\n      if (!tour) return prev;\n\n      if (tour.currentStepIndex < tour.steps.length - 1) {\n        newTours.set(tourId as string, {\n          ...tour,\n          currentStepIndex: tour.currentStepIndex + 1,\n        });\n      } else {\n        newTours.set(tourId as string, {\n          ...tour,\n          isActive: false,\n        });\n        setActiveTour(null);\n      }\n\n      return newTours;\n    });\n  }, []);\n\n  const prevStep = useCallback((tourId: RegisteredTourIds) => {\n    setTours((prev) => {\n      const newTours = new Map(prev);\n      const tour = newTours.get(tourId as string);\n\n      if (tour && tour.currentStepIndex > 0) {\n        newTours.set(tourId as string, {\n          ...tour,\n          currentStepIndex: tour.currentStepIndex - 1,\n        });\n      }\n\n      return newTours;\n    });\n  }, []);\n\n  const goToStep = useCallback(\n    (tourId: RegisteredTourIds, stepIndex: number) => {\n      setTours((prev) => {\n        const newTours = new Map(prev);\n        const tour = newTours.get(tourId as string);\n\n        if (tour && stepIndex >= 0 && stepIndex < tour.steps.length) {\n          newTours.set(tourId as string, {\n            ...tour,\n            currentStepIndex: stepIndex,\n          });\n        }\n\n        return newTours;\n      });\n    },\n    []\n  );\n\n  const contextValue = useMemo(\n    () => ({\n      tours,\n      registerStep,\n      unregisterStep,\n      startTour,\n      stopTour,\n      nextStep,\n      prevStep,\n      goToStep,\n      activeTour,\n    }),\n    [\n      tours,\n      registerStep,\n      unregisterStep,\n      startTour,\n      stopTour,\n      nextStep,\n      prevStep,\n      goToStep,\n      activeTour,\n    ]\n  );\n\n  return (\n    <TorchlightContext.Provider value={contextValue}>\n      {children}\n    </TorchlightContext.Provider>\n  );\n};\n\nexport const useTorchlight = () => {\n  const context = useContext(TorchlightContext);\n\n  if (!context) {\n    throw new Error(\"useTorchlight must be used within a TorchlightProvider\");\n  }\n\n  return context;\n};\n\n// Type-safe hook that registers tours and provides IntelliSense\nexport const useTorchlightSteps = <\n  TourId extends keyof TorchlightToursRegistry,\n  T extends string\n>(\n  tourId: TourId,\n  steps: Omit<TorchlightStep<T>, \"target\" | \"tourId\">[]\n) => {\n  const { registerStep, unregisterStep } = useTorchlight();\n\n  const refsRef = useRef<Record<T, React.RefObject<any>>>(\n    {} as Record<T, React.RefObject<any>>\n  );\n\n  steps.forEach((step) => {\n    if (!refsRef.current[step.id]) {\n      refsRef.current[step.id] = { current: null };\n    }\n  });\n\n  const currentStepsRef = useRef<string>(\"\");\n  const registeredStepsRef = useRef<Set<string>>(new Set());\n\n  useEffect(() => {\n    const stepsSignature = steps\n      .map((s) => `${s.id}:${s.order}:${s.title || \"\"}:${s.placement || \"\"}`)\n      .sort()\n      .join(\"|\");\n\n    if (currentStepsRef.current !== stepsSignature) {\n      steps.forEach((step) => {\n        registerStep(\n          {\n            id: step.id,\n            tourId: tourId as string,\n            order: step.order,\n            title: step.title,\n            content: step.content,\n            placement: step.placement || \"bottom\",\n          },\n          refsRef.current[step.id]\n        );\n        registeredStepsRef.current.add(step.id);\n      });\n\n      currentStepsRef.current = stepsSignature;\n    }\n\n    return () => {\n      registeredStepsRef.current.forEach((stepId) => {\n        unregisterStep(stepId, tourId);\n      });\n      registeredStepsRef.current.clear();\n    };\n  }, [tourId, registerStep, unregisterStep, steps]);\n\n  useEffect(() => {\n    steps.forEach((step) => {\n      registerStep(\n        {\n          id: step.id,\n          tourId: tourId as string,\n          order: step.order,\n          title: step.title,\n          content: step.content,\n          placement: step.placement || \"bottom\",\n        },\n        refsRef.current[step.id]\n      );\n    });\n  }, [steps.map((s) => s.content || \"\").join(\"\"), tourId, registerStep]);\n\n  return refsRef.current;\n};\n"],"names":["TorchlightContext","createContext","TorchlightInternalProvider","children","overlayProps","tours","setTours","useState","Map","activeTour","setActiveTour","registerStep","useCallback","step","ref","prev","newTours","tour","get","tourId","id","steps","currentStepIndex","isActive","existingStepIndex","findIndex","s","newStep","target","existingStep","order","title","content","placement","updatedSteps","sort","a","b","set","newSteps","unregisterStep","stepId","filter","length","delete","Math","min","startTour","console","warn","String","stopTour","nextStep","prevStep","goToStep","stepIndex","contextValue","useMemo","_jsx","Provider","value","useTorchlight","context","useContext","Error","useTorchlightSteps","refsRef","useRef","forEach","current","currentStepsRef","registeredStepsRef","Set","useEffect","stepsSignature","map","join","add","clear"],"mappings":"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"}